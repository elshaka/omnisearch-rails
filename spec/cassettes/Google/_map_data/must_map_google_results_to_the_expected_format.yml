---
http_interactions:
- request:
    method: get
    uri: https://customsearch.googleapis.com/customsearch/v1?cx=c92e36d4389be4fb8&key=AIzaSyAHl2C-VjoShpRPI4E2Nv0aTcxwlv0xRqg&q=test
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Mon, 14 Dec 2020 15:43:29 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-29=":443"; ma=2592000,h3-T051=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 14 Dec 2020 15:43:29 GMT
recorded_with: VCR 5.1.0
